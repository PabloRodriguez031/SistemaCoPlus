{"remainingRequest":"C:\\Users\\Pablo\\Desktop\\coplus\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\Pablo\\Desktop\\coplus\\node_modules\\sweetalert2\\src\\staticMethods\\queue.js","dependencies":[{"path":"C:\\Users\\Pablo\\Desktop\\coplus\\node_modules\\sweetalert2\\src\\staticMethods\\queue.js","mtime":499162500000},{"path":"C:\\Users\\Pablo\\Desktop\\coplus\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Pablo\\Desktop\\coplus\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1526531406000}],"contextDependencies":[],"result":["// private global state for the queue feature\nlet currentSteps = []\n\n/*\n * Global function for chaining sweetAlert popups\n */\nexport const queue = function (steps) {\n  const Swal = this\n  currentSteps = steps\n  const resetQueue = () => {\n    currentSteps = []\n    document.body.removeAttribute('data-swal2-queue-step')\n  }\n  let queueResult = []\n  return new Promise((resolve) => {\n    (function step (i, callback) {\n      if (i < currentSteps.length) {\n        document.body.setAttribute('data-swal2-queue-step', i)\n\n        Swal.fire(currentSteps[i]).then((result) => {\n          if (typeof result.value !== 'undefined') {\n            queueResult.push(result.value)\n            step(i + 1, callback)\n          } else {\n            resetQueue()\n            resolve({ dismiss: result.dismiss })\n          }\n        })\n      } else {\n        resetQueue()\n        resolve({ value: queueResult })\n      }\n    })(0)\n  })\n}\n\n/*\n * Global function for getting the index of current popup in queue\n */\nexport const getQueueStep = () => document.body.getAttribute('data-swal2-queue-step')\n\n/*\n * Global function for inserting a popup to the queue\n */\nexport const insertQueueStep = (step, index) => {\n  if (index && index < currentSteps.length) {\n    return currentSteps.splice(index, 0, step)\n  }\n  return currentSteps.push(step)\n}\n\n/*\n * Global function for deleting a popup from the queue\n */\nexport const deleteQueueStep = (index) => {\n  if (typeof currentSteps[index] !== 'undefined') {\n    currentSteps.splice(index, 1)\n  }\n}\n",null]}