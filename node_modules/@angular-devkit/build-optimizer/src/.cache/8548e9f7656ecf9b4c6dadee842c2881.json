{"remainingRequest":"C:\\Users\\Pablo\\Desktop\\coplus\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\Pablo\\Desktop\\coplus\\node_modules\\sweetalert2\\src\\instanceMethods\\_main.js","dependencies":[{"path":"C:\\Users\\Pablo\\Desktop\\coplus\\node_modules\\sweetalert2\\src\\instanceMethods\\_main.js","mtime":499162500000},{"path":"C:\\Users\\Pablo\\Desktop\\coplus\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Pablo\\Desktop\\coplus\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1526531406000}],"contextDependencies":[],"result":["import defaultParams, { showWarningsForParams } from '../utils/params.js'\nimport * as dom from '../utils/dom/index.js'\nimport { swalClasses } from '../utils/classes.js'\nimport Timer from '../utils/Timer.js'\nimport { formatInputOptions, error, warn, callIfFunction, isPromise } from '../utils/utils.js'\nimport setParameters from '../utils/setParameters.js'\nimport globalState from '../globalState.js'\nimport { openPopup } from '../utils/openPopup.js'\nimport privateProps from '../privateProps.js'\nimport privateMethods from '../privateMethods.js'\n\nexport function _main (userParams) {\n  showWarningsForParams(userParams)\n\n  const innerParams = Object.assign({}, defaultParams, userParams)\n  setParameters(innerParams)\n  Object.freeze(innerParams)\n  privateProps.innerParams.set(this, innerParams)\n\n  // clear the previous timer\n  if (globalState.timeout) {\n    globalState.timeout.stop()\n    delete globalState.timeout\n  }\n\n  // clear the restore focus timeout\n  clearTimeout(globalState.restoreFocusTimeout)\n\n  const domCache = {\n    popup: dom.getPopup(),\n    container: dom.getContainer(),\n    content: dom.getContent(),\n    actions: dom.getActions(),\n    confirmButton: dom.getConfirmButton(),\n    cancelButton: dom.getCancelButton(),\n    closeButton: dom.getCloseButton(),\n    validationMessage: dom.getValidationMessage(),\n    progressSteps: dom.getProgressSteps()\n  }\n  privateProps.domCache.set(this, domCache)\n\n  const constructor = this.constructor\n\n  return new Promise((resolve) => {\n    // functions to handle all closings/dismissals\n    const succeedWith = (value) => {\n      this.closePopup({ value })\n    }\n    const dismissWith = (dismiss) => {\n      this.closePopup({ dismiss })\n    }\n\n    privateMethods.swalPromiseResolve.set(this, resolve)\n\n    // Close on timer\n    if (innerParams.timer) {\n      globalState.timeout = new Timer(() => {\n        dismissWith('timer')\n        delete globalState.timeout\n      }, innerParams.timer)\n    }\n\n    // Get the value of the popup input\n    const getInputValue = () => {\n      const input = this.getInput()\n      if (!input) {\n        return null\n      }\n      switch (innerParams.input) {\n        case 'checkbox':\n          return input.checked ? 1 : 0\n        case 'radio':\n          return input.checked ? input.value : null\n        case 'file':\n          return input.files.length ? input.files[0] : null\n        default:\n          return innerParams.inputAutoTrim ? input.value.trim() : input.value\n      }\n    }\n\n    // input autofocus\n    if (innerParams.input) {\n      setTimeout(() => {\n        const input = this.getInput()\n        if (input) {\n          dom.focusInput(input)\n        }\n      }, 0)\n    }\n\n    const confirm = (value) => {\n      if (innerParams.showLoaderOnConfirm) {\n        constructor.showLoading() // TODO: make showLoading an *instance* method\n      }\n\n      if (innerParams.preConfirm) {\n        this.resetValidationMessage()\n        const preConfirmPromise = Promise.resolve().then(() => innerParams.preConfirm(value, innerParams.validationMessage))\n        preConfirmPromise.then(\n          (preConfirmValue) => {\n            if (dom.isVisible(domCache.validationMessage) || preConfirmValue === false) {\n              this.hideLoading()\n            } else {\n              succeedWith(preConfirmValue || value)\n            }\n          }\n        )\n      } else {\n        succeedWith(value)\n      }\n    }\n\n    // Mouse interactions\n    const onButtonEvent = (e) => {\n      const target = e.target\n      const { confirmButton, cancelButton } = domCache\n      const targetedConfirm = confirmButton && (confirmButton === target || confirmButton.contains(target))\n      const targetedCancel = cancelButton && (cancelButton === target || cancelButton.contains(target))\n\n      switch (e.type) {\n        case 'click':\n          // Clicked 'confirm'\n          if (targetedConfirm && constructor.isVisible()) {\n            this.disableButtons()\n            if (innerParams.input) {\n              const inputValue = getInputValue()\n\n              if (innerParams.inputValidator) {\n                this.disableInput()\n                const validationPromise = Promise.resolve().then(() => innerParams.inputValidator(inputValue, innerParams.validationMessage))\n                validationPromise.then(\n                  (validationMessage) => {\n                    this.enableButtons()\n                    this.enableInput()\n                    if (validationMessage) {\n                      this.showValidationMessage(validationMessage)\n                    } else {\n                      confirm(inputValue)\n                    }\n                  }\n                )\n              } else if (!this.getInput().checkValidity()) {\n                this.enableButtons()\n                this.showValidationMessage(innerParams.validationMessage)\n              } else {\n                confirm(inputValue)\n              }\n            } else {\n              confirm(true)\n            }\n\n            // Clicked 'cancel'\n          } else if (targetedCancel && constructor.isVisible()) {\n            this.disableButtons()\n            dismissWith(constructor.DismissReason.cancel)\n          }\n          break\n        default:\n      }\n    }\n\n    const buttons = domCache.popup.querySelectorAll('button')\n    for (let i = 0; i < buttons.length; i++) {\n      buttons[i].onclick = onButtonEvent\n      buttons[i].onmouseover = onButtonEvent\n      buttons[i].onmouseout = onButtonEvent\n      buttons[i].onmousedown = onButtonEvent\n    }\n\n    // Closing popup by close button\n    domCache.closeButton.onclick = () => {\n      dismissWith(constructor.DismissReason.close)\n    }\n\n    if (innerParams.toast) {\n      // Closing popup by internal click\n      domCache.popup.onclick = () => {\n        if (\n          innerParams.showConfirmButton ||\n          innerParams.showCancelButton ||\n          innerParams.showCloseButton ||\n          innerParams.input\n        ) {\n          return\n        }\n        dismissWith(constructor.DismissReason.close)\n      }\n    } else {\n      let ignoreOutsideClick = false\n\n      // Ignore click events that had mousedown on the popup but mouseup on the container\n      // This can happen when the user drags a slider\n      domCache.popup.onmousedown = () => {\n        domCache.container.onmouseup = function (e) {\n          domCache.container.onmouseup = undefined\n          // We only check if the mouseup target is the container because usually it doesn't\n          // have any other direct children aside of the popup\n          if (e.target === domCache.container) {\n            ignoreOutsideClick = true\n          }\n        }\n      }\n\n      // Ignore click events that had mousedown on the container but mouseup on the popup\n      domCache.container.onmousedown = () => {\n        domCache.popup.onmouseup = function (e) {\n          domCache.popup.onmouseup = undefined\n          // We also need to check if the mouseup target is a child of the popup\n          if (e.target === domCache.popup || domCache.popup.contains(e.target)) {\n            ignoreOutsideClick = true\n          }\n        }\n      }\n\n      domCache.container.onclick = (e) => {\n        if (ignoreOutsideClick) {\n          ignoreOutsideClick = false\n          return\n        }\n        if (e.target !== domCache.container) {\n          return\n        }\n        if (callIfFunction(innerParams.allowOutsideClick)) {\n          dismissWith(constructor.DismissReason.backdrop)\n        }\n      }\n    }\n\n    // Reverse buttons (Confirm on the right side)\n    if (innerParams.reverseButtons) {\n      domCache.confirmButton.parentNode.insertBefore(domCache.cancelButton, domCache.confirmButton)\n    } else {\n      domCache.confirmButton.parentNode.insertBefore(domCache.confirmButton, domCache.cancelButton)\n    }\n\n    // Focus handling\n    const setFocus = (index, increment) => {\n      const focusableElements = dom.getFocusableElements(innerParams.focusCancel)\n      // search for visible elements and select the next possible match\n      for (let i = 0; i < focusableElements.length; i++) {\n        index = index + increment\n\n        // rollover to first item\n        if (index === focusableElements.length) {\n          index = 0\n\n          // go to last item\n        } else if (index === -1) {\n          index = focusableElements.length - 1\n        }\n\n        return focusableElements[index].focus()\n      }\n      // no visible focusable elements, focus the popup\n      domCache.popup.focus()\n    }\n\n    const keydownHandler = (e, innerParams) => {\n      if (innerParams.stopKeydownPropagation) {\n        e.stopPropagation()\n      }\n\n      const arrowKeys = [\n        'ArrowLeft', 'ArrowRight', 'ArrowUp', 'ArrowDown',\n        'Left', 'Right', 'Up', 'Down' // IE11\n      ]\n\n      if (e.key === 'Enter' && !e.isComposing) {\n        if (e.target && this.getInput() && e.target.outerHTML === this.getInput().outerHTML) {\n          if (['textarea', 'file'].includes(innerParams.input)) {\n            return // do not submit\n          }\n\n          constructor.clickConfirm()\n          e.preventDefault()\n        }\n\n        // TAB\n      } else if (e.key === 'Tab') {\n        const targetElement = e.target\n\n        const focusableElements = dom.getFocusableElements(innerParams.focusCancel)\n        let btnIndex = -1\n        for (let i = 0; i < focusableElements.length; i++) {\n          if (targetElement === focusableElements[i]) {\n            btnIndex = i\n            break\n          }\n        }\n\n        if (!e.shiftKey) {\n          // Cycle to the next button\n          setFocus(btnIndex, 1)\n        } else {\n          // Cycle to the prev button\n          setFocus(btnIndex, -1)\n        }\n        e.stopPropagation()\n        e.preventDefault()\n\n        // ARROWS - switch focus between buttons\n      } else if (arrowKeys.includes(e.key)) {\n        // focus Cancel button if Confirm button is currently focused\n        if (document.activeElement === domCache.confirmButton && dom.isVisible(domCache.cancelButton)) {\n          domCache.cancelButton.focus()\n          // and vice versa\n        } else if (document.activeElement === domCache.cancelButton && dom.isVisible(domCache.confirmButton)) {\n          domCache.confirmButton.focus()\n        }\n\n        // ESC\n      } else if ((e.key === 'Escape' || e.key === 'Esc') && callIfFunction(innerParams.allowEscapeKey) === true) {\n        e.preventDefault()\n        dismissWith(constructor.DismissReason.esc)\n      }\n    }\n\n    if (globalState.keydownHandlerAdded) {\n      globalState.keydownTarget.removeEventListener('keydown', globalState.keydownHandler, { capture: globalState.keydownListenerCapture })\n      globalState.keydownHandlerAdded = false\n    }\n\n    if (!innerParams.toast) {\n      globalState.keydownHandler = (e) => keydownHandler(e, innerParams)\n      globalState.keydownTarget = innerParams.keydownListenerCapture ? window : domCache.popup\n      globalState.keydownListenerCapture = innerParams.keydownListenerCapture\n      globalState.keydownTarget.addEventListener('keydown', globalState.keydownHandler, { capture: globalState.keydownListenerCapture })\n      globalState.keydownHandlerAdded = true\n    }\n\n    this.enableButtons()\n    this.hideLoading()\n    this.resetValidationMessage()\n\n    if (innerParams.toast && (innerParams.input || innerParams.footer || innerParams.showCloseButton)) {\n      dom.addClass(document.body, swalClasses['toast-column'])\n    } else {\n      dom.removeClass(document.body, swalClasses['toast-column'])\n    }\n\n    // inputs\n    const inputTypes = ['input', 'file', 'range', 'select', 'radio', 'checkbox', 'textarea']\n    const setInputPlaceholder = (input) => {\n      if (!input.placeholder || innerParams.inputPlaceholder) {\n        input.placeholder = innerParams.inputPlaceholder\n      }\n    }\n    let input\n    for (let i = 0; i < inputTypes.length; i++) {\n      const inputClass = swalClasses[inputTypes[i]]\n      const inputContainer = dom.getChildByClass(domCache.content, inputClass)\n      input = this.getInput(inputTypes[i])\n\n      // set attributes\n      if (input) {\n        for (let j in input.attributes) {\n          if (input.attributes.hasOwnProperty(j)) {\n            const attrName = input.attributes[j].name\n            if (attrName !== 'type' && attrName !== 'value') {\n              input.removeAttribute(attrName)\n            }\n          }\n        }\n        for (let attr in innerParams.inputAttributes) {\n          // Do not set a placeholder for <input type=\"range\">\n          // it'll crash Edge, #1298\n          if (inputTypes[i] === 'range' && attr === 'placeholder') {\n            continue\n          }\n\n          input.setAttribute(attr, innerParams.inputAttributes[attr])\n        }\n      }\n\n      // set class\n      inputContainer.className = inputClass\n      if (innerParams.inputClass) {\n        dom.addClass(inputContainer, innerParams.inputClass)\n      }\n\n      dom.hide(inputContainer)\n    }\n\n    let populateInputOptions\n    switch (innerParams.input) {\n      case 'text':\n      case 'email':\n      case 'password':\n      case 'number':\n      case 'tel':\n      case 'url': {\n        input = dom.getChildByClass(domCache.content, swalClasses.input)\n        if (typeof innerParams.inputValue === 'string' || typeof innerParams.inputValue === 'number') {\n          input.value = innerParams.inputValue\n        } else if (!isPromise(innerParams.inputValue)) {\n          warn(`Unexpected type of inputValue! Expected \"string\", \"number\" or \"Promise\", got \"${typeof innerParams.inputValue}\"`)\n        }\n        setInputPlaceholder(input)\n        input.type = innerParams.input\n        dom.show(input)\n        break\n      }\n      case 'file': {\n        input = dom.getChildByClass(domCache.content, swalClasses.file)\n        setInputPlaceholder(input)\n        input.type = innerParams.input\n        dom.show(input)\n        break\n      }\n      case 'range': {\n        const range = dom.getChildByClass(domCache.content, swalClasses.range)\n        const rangeInput = range.querySelector('input')\n        const rangeOutput = range.querySelector('output')\n        rangeInput.value = innerParams.inputValue\n        rangeInput.type = innerParams.input\n        rangeOutput.value = innerParams.inputValue\n        dom.show(range)\n        break\n      }\n      case 'select': {\n        const select = dom.getChildByClass(domCache.content, swalClasses.select)\n        select.innerHTML = ''\n        if (innerParams.inputPlaceholder) {\n          const placeholder = document.createElement('option')\n          placeholder.innerHTML = innerParams.inputPlaceholder\n          placeholder.value = ''\n          placeholder.disabled = true\n          placeholder.selected = true\n          select.appendChild(placeholder)\n        }\n        populateInputOptions = (inputOptions) => {\n          inputOptions.forEach(inputOption => {\n            const optionValue = inputOption[0]\n            const optionLabel = inputOption[1]\n            const option = document.createElement('option')\n            option.value = optionValue\n            option.innerHTML = optionLabel\n            if (innerParams.inputValue.toString() === optionValue.toString()) {\n              option.selected = true\n            }\n            select.appendChild(option)\n          })\n          dom.show(select)\n          select.focus()\n        }\n        break\n      }\n      case 'radio': {\n        const radio = dom.getChildByClass(domCache.content, swalClasses.radio)\n        radio.innerHTML = ''\n        populateInputOptions = (inputOptions) => {\n          inputOptions.forEach(inputOption => {\n            const radioValue = inputOption[0]\n            const radioLabel = inputOption[1]\n            const radioInput = document.createElement('input')\n            const radioLabelElement = document.createElement('label')\n            radioInput.type = 'radio'\n            radioInput.name = swalClasses.radio\n            radioInput.value = radioValue\n            if (innerParams.inputValue.toString() === radioValue.toString()) {\n              radioInput.checked = true\n            }\n            const label = document.createElement('span')\n            label.innerHTML = radioLabel\n            label.className = swalClasses.label\n            radioLabelElement.appendChild(radioInput)\n            radioLabelElement.appendChild(label)\n            radio.appendChild(radioLabelElement)\n          })\n          dom.show(radio)\n          const radios = radio.querySelectorAll('input')\n          if (radios.length) {\n            radios[0].focus()\n          }\n        }\n        break\n      }\n      case 'checkbox': {\n        const checkbox = dom.getChildByClass(domCache.content, swalClasses.checkbox)\n        const checkboxInput = this.getInput('checkbox')\n        checkboxInput.type = 'checkbox'\n        checkboxInput.value = 1\n        checkboxInput.id = swalClasses.checkbox\n        checkboxInput.checked = Boolean(innerParams.inputValue)\n        let label = checkbox.querySelector('span')\n        label.innerHTML = innerParams.inputPlaceholder\n        dom.show(checkbox)\n        break\n      }\n      case 'textarea': {\n        const textarea = dom.getChildByClass(domCache.content, swalClasses.textarea)\n        textarea.value = innerParams.inputValue\n        setInputPlaceholder(textarea)\n        dom.show(textarea)\n        break\n      }\n      case null: {\n        break\n      }\n      default:\n        error(`Unexpected type of input! Expected \"text\", \"email\", \"password\", \"number\", \"tel\", \"select\", \"radio\", \"checkbox\", \"textarea\", \"file\" or \"url\", got \"${innerParams.input}\"`)\n        break\n    }\n\n    if (innerParams.input === 'select' || innerParams.input === 'radio') {\n      const processInputOptions = inputOptions => populateInputOptions(formatInputOptions(inputOptions))\n      if (isPromise(innerParams.inputOptions)) {\n        constructor.showLoading()\n        innerParams.inputOptions.then((inputOptions) => {\n          this.hideLoading()\n          processInputOptions(inputOptions)\n        })\n      } else if (typeof innerParams.inputOptions === 'object') {\n        processInputOptions(innerParams.inputOptions)\n      } else {\n        error(`Unexpected type of inputOptions! Expected object, Map or Promise, got ${typeof innerParams.inputOptions}`)\n      }\n    } else if (['text', 'email', 'number', 'tel', 'textarea'].includes(innerParams.input) && isPromise(innerParams.inputValue)) {\n      constructor.showLoading()\n      dom.hide(input)\n      innerParams.inputValue.then((inputValue) => {\n        input.value = innerParams.input === 'number' ? parseFloat(inputValue) || 0 : inputValue + ''\n        dom.show(input)\n        input.focus()\n        this.hideLoading()\n      })\n        .catch((err) => {\n          error('Error in inputValue promise: ' + err)\n          input.value = ''\n          dom.show(input)\n          input.focus()\n          this.hideLoading()\n        })\n    }\n\n    openPopup(innerParams)\n\n    if (!innerParams.toast) {\n      if (!callIfFunction(innerParams.allowEnterKey)) {\n        if (document.activeElement && typeof document.activeElement.blur === 'function') {\n          document.activeElement.blur()\n        }\n      } else if (innerParams.focusCancel && dom.isVisible(domCache.cancelButton)) {\n        domCache.cancelButton.focus()\n      } else if (innerParams.focusConfirm && dom.isVisible(domCache.confirmButton)) {\n        domCache.confirmButton.focus()\n      } else {\n        setFocus(-1, 1)\n      }\n    }\n\n    // fix scroll\n    domCache.container.scrollTop = 0\n  })\n}\n",null]}