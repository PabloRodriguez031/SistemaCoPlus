{"remainingRequest":"C:\\Users\\Pablo\\Desktop\\coplus\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\Pablo\\Desktop\\coplus\\node_modules\\sweetalert2\\src\\staticMethods\\timer.js","dependencies":[{"path":"C:\\Users\\Pablo\\Desktop\\coplus\\node_modules\\sweetalert2\\src\\staticMethods\\timer.js","mtime":499162500000},{"path":"C:\\Users\\Pablo\\Desktop\\coplus\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Pablo\\Desktop\\coplus\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1526531406000}],"contextDependencies":[],"result":["import globalState from '../globalState.js'\n\n/**\n * If `timer` parameter is set, returns number of milliseconds of timer remained.\n * Otherwise, returns undefined.\n */\nexport const getTimerLeft = () => {\n  return globalState.timeout && globalState.timeout.getTimerLeft()\n}\n\n/**\n * Stop timer. Returns number of milliseconds of timer remained.\n * If `timer` parameter isn't set, returns undefined.\n */\nexport const stopTimer = () => {\n  return globalState.timeout && globalState.timeout.stop()\n}\n\n/**\n * Resume timer. Returns number of milliseconds of timer remained.\n * If `timer` parameter isn't set, returns undefined.\n */\nexport const resumeTimer = () => {\n  return globalState.timeout && globalState.timeout.start()\n}\n\n/**\n * Resume timer. Returns number of milliseconds of timer remained.\n * If `timer` parameter isn't set, returns undefined.\n */\nexport const toggleTimer = () => {\n  const timer = globalState.timeout\n  return timer && (timer.running ? timer.stop() : timer.start())\n}\n\n/**\n * Increase timer. Returns number of milliseconds of an updated timer.\n * If `timer` parameter isn't set, returns undefined.\n */\nexport const increaseTimer = (n) => {\n  return globalState.timeout && globalState.timeout.increase(n)\n}\n\n/**\n * Check if timer is running. Returns true if timer is running\n * or false if timer is paused or stopped.\n * If `timer` parameter isn't set, returns undefined\n */\nexport const isTimerRunning = () => {\n  return globalState.timeout && globalState.timeout.isRunning()\n}\n",null]}