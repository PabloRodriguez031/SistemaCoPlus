{"remainingRequest":"C:\\Users\\Pablo\\Desktop\\coplus\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\Pablo\\Desktop\\coplus\\node_modules\\sweetalert2\\src\\utils\\setParameters.js","dependencies":[{"path":"C:\\Users\\Pablo\\Desktop\\coplus\\node_modules\\sweetalert2\\src\\utils\\setParameters.js","mtime":499162500000},{"path":"C:\\Users\\Pablo\\Desktop\\coplus\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Pablo\\Desktop\\coplus\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1526531406000}],"contextDependencies":[],"result":["import { swalClasses } from './classes.js'\nimport { warn } from './utils.js'\nimport * as dom from './dom/index.js'\nimport defaultInputValidators from './defaultInputValidators.js'\n\n/**\n * Set type, text and actions on popup\n *\n * @param params\n * @returns {boolean}\n */\nexport default function setParameters (params) {\n  // Use default `inputValidator` for supported input types if not provided\n  if (!params.inputValidator) {\n    Object.keys(defaultInputValidators).forEach((key) => {\n      if (params.input === key) {\n        params.inputValidator = defaultInputValidators[key]\n      }\n    })\n  }\n\n  // Determine if the custom target element is valid\n  if (\n    !params.target ||\n    (typeof params.target === 'string' && !document.querySelector(params.target)) ||\n    (typeof params.target !== 'string' && !params.target.appendChild)\n  ) {\n    warn('Target parameter is not valid, defaulting to \"body\"')\n    params.target = 'body'\n  }\n\n  // Animation\n  if (typeof params.animation === 'function') {\n    params.animation = params.animation.call()\n  }\n\n  let popup\n  const oldPopup = dom.getPopup()\n  let targetElement = typeof params.target === 'string' ? document.querySelector(params.target) : params.target\n  // If the model target has changed, refresh the popup\n  if (oldPopup && targetElement && oldPopup.parentNode !== targetElement.parentNode) {\n    popup = dom.init(params)\n  } else {\n    popup = oldPopup || dom.init(params)\n  }\n\n  // Set popup width\n  if (params.width) {\n    popup.style.width = (typeof params.width === 'number') ? params.width + 'px' : params.width\n  }\n\n  // Set popup padding\n  if (params.padding) {\n    popup.style.padding = (typeof params.padding === 'number') ? params.padding + 'px' : params.padding\n  }\n\n  // Set popup background\n  if (params.background) {\n    popup.style.background = params.background\n  }\n  const popupBackgroundColor = window.getComputedStyle(popup).getPropertyValue('background-color')\n  const successIconParts = popup.querySelectorAll('[class^=swal2-success-circular-line], .swal2-success-fix')\n  for (let i = 0; i < successIconParts.length; i++) {\n    successIconParts[i].style.backgroundColor = popupBackgroundColor\n  }\n\n  const container = dom.getContainer()\n  const closeButton = dom.getCloseButton()\n  const footer = dom.getFooter()\n\n  // Title\n  dom.renderTitle(params)\n\n  // Content\n  dom.renderContent(params)\n\n  // Backdrop\n  if (typeof params.backdrop === 'string') {\n    dom.getContainer().style.background = params.backdrop\n  } else if (!params.backdrop) {\n    dom.addClass([document.documentElement, document.body], swalClasses['no-backdrop'])\n  }\n  if (!params.backdrop && params.allowOutsideClick) {\n    warn('\"allowOutsideClick\" parameter requires `backdrop` parameter to be set to `true`')\n  }\n\n  // Position\n  if (params.position in swalClasses) {\n    dom.addClass(container, swalClasses[params.position])\n  } else {\n    warn('The \"position\" parameter is not valid, defaulting to \"center\"')\n    dom.addClass(container, swalClasses.center)\n  }\n\n  // Grow\n  if (params.grow && typeof params.grow === 'string') {\n    let growClass = 'grow-' + params.grow\n    if (growClass in swalClasses) {\n      dom.addClass(container, swalClasses[growClass])\n    }\n  }\n\n  // Close button\n  if (params.showCloseButton) {\n    closeButton.setAttribute('aria-label', params.closeButtonAriaLabel)\n    dom.show(closeButton)\n  } else {\n    dom.hide(closeButton)\n  }\n\n  // Default Class\n  popup.className = swalClasses.popup\n  if (params.toast) {\n    dom.addClass([document.documentElement, document.body], swalClasses['toast-shown'])\n    dom.addClass(popup, swalClasses.toast)\n  } else {\n    dom.addClass(popup, swalClasses.modal)\n  }\n\n  // Custom Class\n  if (params.customClass) {\n    dom.addClass(popup, params.customClass)\n  }\n\n  if (params.customContainerClass) {\n    dom.addClass(container, params.customContainerClass)\n  }\n\n  // Progress steps\n  dom.renderProgressSteps(params)\n\n  // Icon\n  dom.renderIcon(params)\n\n  // Image\n  dom.renderImage(params)\n\n  // Actions (buttons)\n  dom.renderActions(params)\n\n  // Footer\n  dom.parseHtmlToContainer(params.footer, footer)\n\n  // CSS animation\n  if (params.animation === true) {\n    dom.removeClass(popup, swalClasses.noanimation)\n  } else {\n    dom.addClass(popup, swalClasses.noanimation)\n  }\n\n  // showLoaderOnConfirm && preConfirm\n  if (params.showLoaderOnConfirm && !params.preConfirm) {\n    warn(\n      'showLoaderOnConfirm is set to true, but preConfirm is not defined.\\n' +\n      'showLoaderOnConfirm should be used together with preConfirm, see usage example:\\n' +\n      'https://sweetalert2.github.io/#ajax-request'\n    )\n  }\n}\n\n",null]}