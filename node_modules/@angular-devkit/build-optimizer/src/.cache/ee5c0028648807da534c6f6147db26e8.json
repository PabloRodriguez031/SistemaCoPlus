{"remainingRequest":"C:\\Users\\Pablo\\Desktop\\coplus\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\Pablo\\Desktop\\coplus\\node_modules\\sweetalert2\\src\\utils\\dom\\getters.js","dependencies":[{"path":"C:\\Users\\Pablo\\Desktop\\coplus\\node_modules\\sweetalert2\\src\\utils\\dom\\getters.js","mtime":499162500000},{"path":"C:\\Users\\Pablo\\Desktop\\coplus\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Pablo\\Desktop\\coplus\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1526531406000}],"contextDependencies":[],"result":["import { swalClasses } from '../classes.js'\nimport { uniqueArray, toArray } from '../utils.js'\nimport { isVisible } from './domUtils.js'\n\nexport const getContainer = () => document.body.querySelector('.' + swalClasses.container)\n\nconst elementByClass = (className) => {\n  const container = getContainer()\n  return container ? container.querySelector('.' + className) : null\n}\n\nexport const getPopup = () => elementByClass(swalClasses.popup)\n\nexport const getIcons = () => {\n  const popup = getPopup()\n  return toArray(popup.querySelectorAll('.' + swalClasses.icon))\n}\n\nexport const getTitle = () => elementByClass(swalClasses.title)\n\nexport const getContent = () => elementByClass(swalClasses.content)\n\nexport const getImage = () => elementByClass(swalClasses.image)\n\nexport const getProgressSteps = () => elementByClass(swalClasses.progresssteps)\n\nexport const getValidationMessage = () => elementByClass(swalClasses['validation-message'])\n\nexport const getConfirmButton = () => elementByClass(swalClasses.confirm)\n\nexport const getCancelButton = () => elementByClass(swalClasses.cancel)\n\nexport const getActions = () => elementByClass(swalClasses.actions)\n\nexport const getFooter = () => elementByClass(swalClasses.footer)\n\nexport const getCloseButton = () => elementByClass(swalClasses.close)\n\nexport const getFocusableElements = () => {\n  const focusableElementsWithTabindex = toArray(\n    getPopup().querySelectorAll('[tabindex]:not([tabindex=\"-1\"]):not([tabindex=\"0\"])')\n  )\n  // sort according to tabindex\n    .sort((a, b) => {\n      a = parseInt(a.getAttribute('tabindex'))\n      b = parseInt(b.getAttribute('tabindex'))\n      if (a > b) {\n        return 1\n      } else if (a < b) {\n        return -1\n      }\n      return 0\n    })\n\n  // https://github.com/jkup/focusable/blob/master/index.js\n  const otherFocusableElements = toArray(\n    getPopup().querySelectorAll('a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), iframe, object, embed, [tabindex=\"0\"], [contenteditable], audio[controls], video[controls]')\n  ).filter(el => el.getAttribute('tabindex') !== '-1')\n\n  return uniqueArray(focusableElementsWithTabindex.concat(otherFocusableElements)).filter(el => isVisible(el))\n}\n\nexport const isModal = () => {\n  return !isToast() && !document.body.classList.contains(swalClasses['no-backdrop'])\n}\n\nexport const isToast = () => {\n  return document.body.classList.contains(swalClasses['toast-shown'])\n}\n\nexport const isLoading = () => {\n  return getPopup().hasAttribute('data-loading')\n}\n",null]}