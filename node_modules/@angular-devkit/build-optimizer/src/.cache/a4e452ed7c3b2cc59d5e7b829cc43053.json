{"remainingRequest":"C:\\Users\\Pablo\\Desktop\\coplus\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\Pablo\\Desktop\\coplus\\node_modules\\sweetalert2\\src\\instanceMethods\\close.js","dependencies":[{"path":"C:\\Users\\Pablo\\Desktop\\coplus\\node_modules\\sweetalert2\\src\\instanceMethods\\close.js","mtime":499162500000},{"path":"C:\\Users\\Pablo\\Desktop\\coplus\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Pablo\\Desktop\\coplus\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1526531406000}],"contextDependencies":[],"result":["import { undoScrollbar } from '../utils/scrollbarFix.js'\nimport { undoIOSfix } from '../utils/iosFix.js'\nimport { undoIEfix } from '../utils/ieFix.js'\nimport { unsetAriaHidden } from '../utils/aria.js'\nimport * as dom from '../utils/dom/index.js'\nimport { swalClasses } from '../utils/classes.js'\nimport globalState, { restoreActiveElement } from '../globalState.js'\nimport privateProps from '../privateProps.js'\nimport privateMethods from '../privateMethods.js'\n/*\n * Instance method to close sweetAlert\n */\nexport function close (resolveValue) {\n  const container = dom.getContainer()\n  const popup = dom.getPopup()\n  const innerParams = privateProps.innerParams.get(this)\n  const swalPromiseResolve = privateMethods.swalPromiseResolve.get(this)\n  const onClose = innerParams.onClose\n  const onAfterClose = innerParams.onAfterClose\n\n  if (!popup) {\n    return\n  }\n\n  if (onClose !== null && typeof onClose === 'function') {\n    onClose(popup)\n  }\n\n  dom.removeClass(popup, swalClasses.show)\n  dom.addClass(popup, swalClasses.hide)\n\n  const removePopupAndResetState = () => {\n    if (!dom.isToast()) {\n      restoreActiveElement().then(() => triggerOnAfterClose(onAfterClose))\n      globalState.keydownTarget.removeEventListener('keydown', globalState.keydownHandler, { capture: globalState.keydownListenerCapture })\n      globalState.keydownHandlerAdded = false\n    } else {\n      triggerOnAfterClose(onAfterClose)\n    }\n\n    if (container.parentNode) {\n      container.parentNode.removeChild(container)\n    }\n    dom.removeClass(\n      [document.documentElement, document.body],\n      [\n        swalClasses.shown,\n        swalClasses['height-auto'],\n        swalClasses['no-backdrop'],\n        swalClasses['toast-shown'],\n        swalClasses['toast-column']\n      ]\n    )\n\n    if (dom.isModal()) {\n      undoScrollbar()\n      undoIOSfix()\n      undoIEfix()\n      unsetAriaHidden()\n    }\n  }\n\n  // If animation is supported, animate\n  if (dom.animationEndEvent && !dom.hasClass(popup, swalClasses.noanimation)) {\n    popup.addEventListener(dom.animationEndEvent, function swalCloseEventFinished () {\n      popup.removeEventListener(dom.animationEndEvent, swalCloseEventFinished)\n      if (dom.hasClass(popup, swalClasses.hide)) {\n        removePopupAndResetState()\n      }\n    })\n  } else {\n    // Otherwise, remove immediately\n    removePopupAndResetState()\n  }\n\n  // Resolve Swal promise\n  swalPromiseResolve(resolveValue || {})\n}\n\nconst triggerOnAfterClose = (onAfterClose) => {\n  if (onAfterClose !== null && typeof onAfterClose === 'function') {\n    setTimeout(() => {\n      onAfterClose()\n    })\n  }\n}\n\nexport {\n  close as closePopup,\n  close as closeModal,\n  close as closeToast\n}\n",null]}