{"remainingRequest":"C:\\Users\\Pablo\\Desktop\\coplus\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\Pablo\\Desktop\\coplus\\node_modules\\sweetalert2\\src\\utils\\utils.js","dependencies":[{"path":"C:\\Users\\Pablo\\Desktop\\coplus\\node_modules\\sweetalert2\\src\\utils\\utils.js","mtime":499162500000},{"path":"C:\\Users\\Pablo\\Desktop\\coplus\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Pablo\\Desktop\\coplus\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1526531406000}],"contextDependencies":[],"result":["export const consolePrefix = 'SweetAlert2:'\n\n/**\n * Filter the unique values into a new array\n * @param arr\n */\nexport const uniqueArray = (arr) => {\n  const result = []\n  for (let i = 0; i < arr.length; i++) {\n    if (result.indexOf(arr[i]) === -1) {\n      result.push(arr[i])\n    }\n  }\n  return result\n}\n\n/**\n * Convert NodeList to Array\n * @param nodeList\n */\nexport const toArray = (nodeList) => Array.prototype.slice.call(nodeList)\n\n/**\n * Converts `inputOptions` into an array of `[value, label]`s\n * @param inputOptions\n */\nexport const formatInputOptions = (inputOptions) => {\n  const result = []\n  if (typeof Map !== 'undefined' && inputOptions instanceof Map) {\n    inputOptions.forEach((value, key) => {\n      result.push([key, value])\n    })\n  } else {\n    Object.keys(inputOptions).forEach(key => {\n      result.push([key, inputOptions[key]])\n    })\n  }\n  return result\n}\n\n/**\n * Standardise console warnings\n * @param message\n */\nexport const warn = (message) => {\n  console.warn(`${consolePrefix} ${message}`)\n}\n\n/**\n * Standardise console errors\n * @param message\n */\nexport const error = (message) => {\n  console.error(`${consolePrefix} ${message}`)\n}\n\n/**\n * Private global state for `warnOnce`\n * @type {Array}\n * @private\n */\nconst previousWarnOnceMessages = []\n\n/**\n * Show a console warning, but only if it hasn't already been shown\n * @param message\n */\nexport const warnOnce = (message) => {\n  if (!previousWarnOnceMessages.includes(message)) {\n    previousWarnOnceMessages.push(message)\n    warn(message)\n  }\n}\n\n/**\n * If `arg` is a function, call it (with no arguments or context) and return the result.\n * Otherwise, just pass the value through\n * @param arg\n */\nexport const callIfFunction = (arg) => typeof arg === 'function' ? arg() : arg\n\nexport const isPromise = (arg) => arg && Promise.resolve(arg) === arg\n",null]}