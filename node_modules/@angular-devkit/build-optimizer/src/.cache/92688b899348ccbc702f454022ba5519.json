{"remainingRequest":"C:\\Users\\Pablo\\Desktop\\coplus\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\Pablo\\Desktop\\coplus\\node_modules\\sweetalert2\\src\\utils\\dom\\init.js","dependencies":[{"path":"C:\\Users\\Pablo\\Desktop\\coplus\\node_modules\\sweetalert2\\src\\utils\\dom\\init.js","mtime":499162500000},{"path":"C:\\Users\\Pablo\\Desktop\\coplus\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Pablo\\Desktop\\coplus\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1526531406000}],"contextDependencies":[],"result":["import { swalClasses, iconTypes } from '../classes.js'\nimport { getContainer, getPopup, getContent } from './getters.js'\nimport { addClass, removeClass, getChildByClass } from './domUtils.js'\nimport { isNodeEnv } from '../isNodeEnv.js'\nimport { error } from '../utils.js'\nimport sweetAlert from '../../sweetalert2.js'\n\nconst sweetHTML = `\n <div aria-labelledby=\"${swalClasses.title}\" aria-describedby=\"${swalClasses.content}\" class=\"${swalClasses.popup}\" tabindex=\"-1\">\n   <div class=\"${swalClasses.header}\">\n     <ul class=\"${swalClasses.progresssteps}\"></ul>\n     <div class=\"${swalClasses.icon} ${iconTypes.error}\">\n       <span class=\"swal2-x-mark\"><span class=\"swal2-x-mark-line-left\"></span><span class=\"swal2-x-mark-line-right\"></span></span>\n     </div>\n     <div class=\"${swalClasses.icon} ${iconTypes.question}\">\n       <span class=\"${swalClasses['icon-text']}\">?</span>\n      </div>\n     <div class=\"${swalClasses.icon} ${iconTypes.warning}\">\n       <span class=\"${swalClasses['icon-text']}\">!</span>\n      </div>\n     <div class=\"${swalClasses.icon} ${iconTypes.info}\">\n       <span class=\"${swalClasses['icon-text']}\">i</span>\n      </div>\n     <div class=\"${swalClasses.icon} ${iconTypes.success}\">\n       <div class=\"swal2-success-circular-line-left\"></div>\n       <span class=\"swal2-success-line-tip\"></span> <span class=\"swal2-success-line-long\"></span>\n       <div class=\"swal2-success-ring\"></div> <div class=\"swal2-success-fix\"></div>\n       <div class=\"swal2-success-circular-line-right\"></div>\n     </div>\n     <img class=\"${swalClasses.image}\" />\n     <h2 class=\"${swalClasses.title}\" id=\"${swalClasses.title}\"></h2>\n     <button type=\"button\" class=\"${swalClasses.close}\">Ã—</button>\n   </div>\n   <div class=\"${swalClasses.content}\">\n     <div id=\"${swalClasses.content}\"></div>\n     <input class=\"${swalClasses.input}\" />\n     <input type=\"file\" class=\"${swalClasses.file}\" />\n     <div class=\"${swalClasses.range}\">\n       <input type=\"range\" />\n       <output></output>\n     </div>\n     <select class=\"${swalClasses.select}\"></select>\n     <div class=\"${swalClasses.radio}\"></div>\n     <label for=\"${swalClasses.checkbox}\" class=\"${swalClasses.checkbox}\">\n       <input type=\"checkbox\" />\n       <span class=\"${swalClasses.label}\"></span>\n     </label>\n     <textarea class=\"${swalClasses.textarea}\"></textarea>\n     <div class=\"${swalClasses['validation-message']}\" id=\"${swalClasses['validation-message']}\"></div>\n   </div>\n   <div class=\"${swalClasses.actions}\">\n     <button type=\"button\" class=\"${swalClasses.confirm}\">OK</button>\n     <button type=\"button\" class=\"${swalClasses.cancel}\">Cancel</button>\n   </div>\n   <div class=\"${swalClasses.footer}\">\n   </div>\n </div>\n`.replace(/(^|\\n)\\s*/g, '')\n\n/*\n * Add modal + backdrop to DOM\n */\nexport const init = (params) => {\n  // Clean up the old popup if it exists\n  const c = getContainer()\n  if (c) {\n    c.parentNode.removeChild(c)\n    removeClass(\n      [document.documentElement, document.body],\n      [\n        swalClasses['no-backdrop'],\n        swalClasses['toast-shown'],\n        swalClasses['has-column']\n      ]\n    )\n  }\n\n  /* istanbul ignore if */\n  if (isNodeEnv()) {\n    error('SweetAlert2 requires document to initialize')\n    return\n  }\n\n  const container = document.createElement('div')\n  container.className = swalClasses.container\n  container.innerHTML = sweetHTML\n\n  let targetElement = typeof params.target === 'string' ? document.querySelector(params.target) : params.target\n  targetElement.appendChild(container)\n\n  const popup = getPopup()\n  const content = getContent()\n  const input = getChildByClass(content, swalClasses.input)\n  const file = getChildByClass(content, swalClasses.file)\n  const range = content.querySelector(`.${swalClasses.range} input`)\n  const rangeOutput = content.querySelector(`.${swalClasses.range} output`)\n  const select = getChildByClass(content, swalClasses.select)\n  const checkbox = content.querySelector(`.${swalClasses.checkbox} input`)\n  const textarea = getChildByClass(content, swalClasses.textarea)\n\n  // a11y\n  popup.setAttribute('role', params.toast ? 'alert' : 'dialog')\n  popup.setAttribute('aria-live', params.toast ? 'polite' : 'assertive')\n  if (!params.toast) {\n    popup.setAttribute('aria-modal', 'true')\n  }\n\n  // RTL\n  if (window.getComputedStyle(targetElement).direction === 'rtl') {\n    addClass(getContainer(), swalClasses.rtl)\n  }\n\n  let oldInputVal // IE11 workaround, see #1109 for details\n  const resetValidationMessage = (e) => {\n    if (sweetAlert.isVisible() && oldInputVal !== e.target.value) {\n      sweetAlert.resetValidationMessage()\n    }\n    oldInputVal = e.target.value\n  }\n\n  input.oninput = resetValidationMessage\n  file.onchange = resetValidationMessage\n  select.onchange = resetValidationMessage\n  checkbox.onchange = resetValidationMessage\n  textarea.oninput = resetValidationMessage\n\n  range.oninput = (e) => {\n    resetValidationMessage(e)\n    rangeOutput.value = range.value\n  }\n\n  range.onchange = (e) => {\n    resetValidationMessage(e)\n    range.nextSibling.value = range.value\n  }\n\n  return popup\n}\n",null]}